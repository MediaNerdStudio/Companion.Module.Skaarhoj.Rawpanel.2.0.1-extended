exports.ConfigFields = [
	{
		type: 'textinput',
		id: 'host',
		label: 'Controler IP',
		width: 5,
		// regex: self.REGEX_IP
	},
	{
		type: 'textinput',
		id: 'tcpPort',
		label: 'TCP Port (Default: 9923)',
		width: 4,
		default: 9923,
		regex: this.REGEX_PORT,
	},
	{
		type: "static-text",
		id: 'dummy1',
		width: 12,
		label: ' ',
		value: ' ',
	},
	{
		type: 'checkbox',
		id: 'satEnable',
		width: 1,
		label: 'Enable',
		default: true,
	},
	{
		type: "static-text",
		id: 'satInfo',
		width: 11,
		label: 'Companion Satellite API v2.0',
		value:
			"Enabling the satellite API, you will gain access to all buttons, just like with the normal streamdeck. It will reflect the number of buttons that are passed on thought the <b>Button</b> option below. It even supports going to different pages and so on. To use these buttons, please type what <b>HWC ID</b> you want to tie to each button below:",
	},
	{
		type: "static-text",
		id: 'rowInfo',
		width: 12,
		value:
			'<b>When filling in you HWC id\'s.</b> Format: "button_HWC, Screen_HWC" -> "1,10" if there is only one number screen will be asumed to be on the same HWC',
	},
	{
		type: 'textinput',
		id: 'buttonCount',
		width: 1,
	},
	{
		type: "static-text",
		id: 'satInfo',
		width: 11,
		label: 'Number of buttons passed by Companion Satellite API v2.0 [Default = 32]',
		value:
			"Number of buttons on the controller. Seperate LED strips are handled as buttons. i.e. The SKAARHOJ RackFly Duo has 2 rows of 24 buttons. Which makes for 48 'buttons'. We're not using the last 2 columns as the segments have 6 buttons so we have to pass 64 buttons via the API.",
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 12,
		value: '<b>Surface Rows 1 - 8,</b> Columns 1 - 8',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 1',
	},
	{
		type: 'textinput',
		label: 'Col 1',
		id: 'btn_1',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 2',
		id: 'btn_2',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 3',
		id: 'btn_3',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 4',
		id: 'btn_4',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 5',
		id: 'btn_5',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 6',
		id: 'btn_6',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 7',
		id: 'btn_7',
		width: 1,
	},
	{
		type: 'textinput',
		label: 'Col 8',
		id: 'btn_8',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 2',
	},
	{
		type: 'textinput',
		id: 'btn_9',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_10',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_11',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_12',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_13',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_14',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_15',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_16',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 3',
	},
	{
		type: 'textinput',
		id: 'btn_17',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_18',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_19',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_20',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_21',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_22',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_23',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_24',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 4',
	},
	{
		type: 'textinput',
		id: 'btn_25',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_26',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_27',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_28',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_29',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_30',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_31',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_32',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 5',
	},
	{
		type: 'textinput',
		id: 'btn_33',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_34',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_35',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_36',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_37',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_38',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_39',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_40',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 6',
	},
	{
		type: 'textinput',
		id: 'btn_41',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_42',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_43',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_44',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_45',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_46',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_47',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_48',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 7',
	},
	{
		type: 'textinput',
		id: 'btn_49',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_50',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_51',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_52',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_53',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_54',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_55',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_56',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 8',
	},
	{
		type: 'textinput',
		id: 'btn_57',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_58',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_59',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_60',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_61',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_62',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_63',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_64',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'dummy2',
		width: 12,
		label: 'The rows below are use as feedback LED\'S for the Skaarhoj FlyPack Duo',
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 9',
	},
	{
		type: 'textinput',
		id: 'btn_65',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_66',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_67',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_68',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_69',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_70',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_71',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_72',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 10',
	},
	{
		type: 'textinput',
		id: 'btn_73',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_74',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_75',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_76',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_77',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_78',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_79',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_80',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 11',
	},
	{
		type: 'textinput',
		id: 'btn_81',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_82',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_83',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_84',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_85',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_86',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_87',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_88',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},

	{
		type: "static-text",
		id: 'rowInfo1',
		width: 1,
		value: 'Row 12',
	},
	{
		type: 'textinput',
		id: 'btn_89',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_90',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_91',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_92',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_93',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_94',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_95',
		width: 1,
	},
	{
		type: 'textinput',
		id: 'btn_96',
		width: 1,
	},
	{
		type: "static-text",
		id: 'rowInfo1',
		width: 3,
		value: ' ',
	},
	{
		type: "static-text",
		id: 'dummy2',
		width: 12,
		label: ' ',
		value: ' ',
	},

	{
		type: 'checkbox',
		id: 'showComLabels',
		width: 1,
		label: 'Enable',
		default: true,
	},
	{
		type: "static-text",
		id: 'satInfo',
		width: 11,
		label: 'Show Companion Labels on LCD',
		value:
			"Show or hide the Companion adress label bar at the top of the LCD. The option does not follow the 'Button option'. This is WIP",
	},
	{
		type: 'checkbox',
		id: 'autoDim',
		width: 1,
		label: 'Enable',
		default: true,
	},
	{
		type: "static-text",
		id: 'satInfo',
		width: 11,
		label: 'LED Feedback, Auto dim or off? (Might need Companion or the module to be restarted)',
		value:
			"If this is enabled, all HWC's that has an LED will light a dim white when the button is black in companion (mimics normal SKAARHOJ behaviour). Turn this off if you want them to turn completely off. (This would be more in line with how companion does it usually)",
	},
	{
		type: 'number',
		label: 'TCP Timeout (1 sec -> 5 min, default 5 sec = 5000)',
		id: 'timeout',
		width: 12,
		default: 5000,
		min: 1000,
		max: 300000,
	},
	{
		type: 'number',
		label: 'Backup LCD Refresh (5 sec -> 10 min, default 30 sec = 30000)',
		id: 'refresh',
		width: 12,
		default: 30000,
		min: 5000,
		max: 600000,
	},
	{
		type: 'checkbox',
		id: 'debug',
		width: 1,
		label: 'Enable',
		default: false,
	},
	{
		type: "static-text",
		id: 'debugInfo',
		width: 11,
		label: 'Enable Debug To Log Window',
		value:
			'Requires Companion to be restarted. But this will allow you the see what is being sent from the module and what is being received from the panel.',
	},
]